{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"lqtImageViewer","text":"<p>A simple but flexible image viewer for PyQt that take numpy array as input.</p> <p>The API doesn't perform any I/O or image-processing and let the developer  handles how arrays are generated.</p>"},{"location":"#prerequisites","title":"prerequisites","text":"<p>QtPy is used to handle compatibility between python Qt versions. </p> <p>The app has been tested for PySide2 and PySide6 and doesn't declare one or the other in its dependencies.</p>"},{"location":"#installation","title":"installation","text":"<p>The repository is managed through uv and use the standard python <code>pyproject.toml</code> to declare its dependencies.</p> <p>If you wish to quickly test the widget before integrating it into your app as dependency you can use:</p> <p><pre><code>cd path/to/repo\nuv run python -m lqtImageViewer\n</code></pre> Which will display a GUI allowing you to load an image file with <code>Ctrl+O</code> (IO is managed using OpenImageIO extra dependency)</p>"},{"location":"#usage-developer","title":"usage-developer","text":"<p>Most basic example :</p> <pre><code>import numpy\nimport sys\n\nfrom Qt import QtWidgets\n\nfrom lqtImageViewer import LqtImageViewport\n\napp = QtWidgets.QApplication()\n\narray = numpy.full((256,256,4), (3000, 63535, 5535, 65535), numpy.uint16)\n\nviewer = LqtImageViewport()\nviewer.set_image_from_array(array)\nviewer.resize(1300, 800)\nviewer.show()\n\nsys.exit(app.exec_())\n</code></pre> <p>Note that the viewer expect R-G-B-A uint16 encoded array. But you can still give it other encodings (channels, bitdepth) and it will handle the conversion.</p>"},{"location":"#color-picking","title":"color-picking","text":"<p>LIV include a color-picker plugin that allow you to select a area of pixel on the image.</p> <p>Note the color picker doesn't actually perform any \"color\" picking. It only allow to pick an area on the image. It is up to the developer to convert that area into a color or anything else.</p> <pre><code># this is demo code, not directly executable\nimport numpy\nfrom lqtImageViewer import LqtImageViewport\n\narray = numpy.full((256,256,4), (0.23, 0.69, 0.1, 65535), numpy.float32)\n\nviewer = LqtImageViewport()\nviewer.set_image_from_array(array)\n# retrieve a QRect\npicked_area = viewer.get_color_picked_area()\n# exactly the same as above\npicked_area = viewer.color_picker.get_picked_area()\n\n\n# there is a signal for when the picked area change\n# note the signal doesn't pass any value\n\ndef print_picked():\n    area = viewer.get_color_picked_area()\n    sliced = array[\n        area.y() : area.y() + area.height(),\n        area.x() : area.x() + area.width(),\n        ...,\n    ]\n    average = numpy.mean(sliced, axis=(0, 1))\n    print(numpy.array2string(average, precision=3, separator=\",\"))\n\n\nviewer.picked_color_changed_signal.connect(print_picked)\n</code></pre>"},{"location":"#usage-user","title":"usage-user","text":""},{"location":"#key-binding","title":"key binding","text":"<p>keyboard :</p> <ul> <li><code>home</code> reset the zoom to 1:1</li> <li><code>B</code> switch between background styles</li> <li><code>F</code> reset the viewport position to origin</li> <li><code>Q</code> rotate the image by +90 degree</li> <li><code>E</code> rotate the image by -90 degree</li> </ul> <p>mouse:</p> <ul> <li><code>MMB + drag</code>: pan the viewport</li> <li><code>Alt + LMB + drag</code>: pan the viewport</li> <li><code>Scroll Wheel</code>: zoom the viewport</li> <li><code>Alt + MMB + drag</code>: zoom the viewport</li> <li><code>Alt + Shift</code> : display a pixel coordinates grid as long as the keys are hold</li> <li><code>Alt + Shift + Wheel</code> change the density of the coordinates grid</li> <li><code>Ctrl + LMB</code> : show the color-picker at the current cursor position</li> <li><code>Ctrl + Shift + LMB + drag</code>: create a color-picked area</li> <li><code>Ctrl + RMB</code>: hide/disable the color-picker</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Contributing guidelines and workflow for developers.</p>"},{"location":"contributing/#pre-requisites","title":"pre-requisites","text":"<ul> <li><code>git</code> is available on your system</li> <li><code>uv</code> is available on your system</li> </ul>"},{"location":"contributing/#getting-started","title":"getting started","text":"<pre><code>cd /some/place/to/develop\ngit clone https://github.com/MrLixm/lqtImageViewer.git\ncd lqtImageViewer\n# create the python venv\nuv sync --all-group\n# create and checkout new branch, DON'T work on main !\ngit checkout -b &lt;branchname&gt;\n</code></pre>"},{"location":"contributing/#code-guidelines","title":"code guidelines","text":"<ul> <li>make sure the code is formatted with black before committing   <pre><code># reformat the python package \nblack lqtImageViewer\n</code></pre></li> </ul>"},{"location":"contributing/#building-documentation","title":"building documentation","text":"<p>build once:</p> <pre><code>uv run --group doc mkdocs build\n</code></pre> <p>build with live changes detection:</p> <pre><code>uv run --group doc mkdocs serve --watch lqtImageViewer/\n</code></pre>"},{"location":"api/","title":"lqtImageViewer","text":"<p>Those are the available objects that can be imported from :</p> <pre><code>import lqtImageViewer\n</code></pre> <pre><code># widgets\nfrom lqtImageViewer import LqtImageViewport\nfrom lqtImageViewer import LIVGraphicView\nfrom lqtImageViewer import LIVGraphicScene\nfrom lqtImageViewer import ImageItem\n\n# configuration\nfrom lqtImageViewer import config\nfrom lqtImageViewer import BaseBackgroundStyle\nfrom lqtImageViewer import LIVKeyShortcut\n\n# plugins\nfrom lqtImageViewer import BasePluginType\nfrom lqtImageViewer import BaseScreenSpacePlugin\nfrom lqtImageViewer import ColorPickerPlugin\n\n# utilities\nfrom lqtImageViewer import convert_bit_depth\nfrom lqtImageViewer import ensure_rgba_array\n</code></pre> <p>See config.</p>"},{"location":"api/#lqtImageViewer.LqtImageViewport","title":"LqtImageViewport","text":"<pre><code>LqtImageViewport(\n    parent: QWidget = None,\n    default_image: Optional[QImage] = None,\n    default_image_visible: bool = True,\n    background_library: list[BaseBackgroundStyle] = None,\n)\n</code></pre> <p>               Bases: <code>QWidget</code></p> <p>A widget showing a rectangular area called \"viewport\". The viewport is an infinite 2D canvas containing the image to display.</p> <p>You can move in that canvas freely, using panning or zooming.</p> <p>That viewport doesn't know anything about image processing, like isolating channels, color-management and so on. It just displays directly the numpy array.</p> <p>Parameters:</p> <ul> <li> <code>parent</code>               (<code>QWidget</code>, default:                   <code>None</code> )           \u2013            <p>usual parent QWidget</p> </li> <li> <code>default_image</code>               (<code>Optional[QImage]</code>, default:                   <code>None</code> )           \u2013            <p>a QImage to use when no other image as been loaded yet. If None a default image will be generated.</p> </li> <li> <code>default_image_visible</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>True to make the default image visible, else only the background will be visible.</p> </li> <li> <code>background_library</code>               (<code>list[BaseBackgroundStyle]</code>, default:                   <code>None</code> )           \u2013            <p>List of backgrounds styles the user can switch between.</p> </li> </ul>"},{"location":"api/#lqtImageViewer.LqtImageViewport.color_picker","title":"color_picker","text":"<pre><code>color_picker\n</code></pre> <p>Get the color picker builtin plugin.</p>"},{"location":"api/#lqtImageViewer.LqtImageViewport.image_cleared_signal","title":"image_cleared_signal","text":"<pre><code>image_cleared_signal = Signal()\n</code></pre>"},{"location":"api/#lqtImageViewer.LqtImageViewport.picked_color_changed_signal","title":"picked_color_changed_signal","text":"<pre><code>picked_color_changed_signal = picked_color_changed\n</code></pre>"},{"location":"api/#lqtImageViewer.LqtImageViewport.add_plugin","title":"add_plugin","text":"<pre><code>add_plugin(plugin: BasePluginType)\n</code></pre> <p>Add the given plugin to handle.</p> <p>Parameters:</p> <ul> <li> <code>plugin</code>               (<code>BasePluginType</code>)           \u2013            <p>instance of the plugin to draw when necessary. already-added plugins are handled properly (discarded).</p> </li> </ul>"},{"location":"api/#lqtImageViewer.LqtImageViewport.clear_image","title":"clear_image","text":"<pre><code>clear_image()\n</code></pre> <p>Clear the image currently displayed, to nothing, or the default image.</p>"},{"location":"api/#lqtImageViewer.LqtImageViewport.eventFilter","title":"eventFilter","text":"<pre><code>eventFilter(watched: QObject, event: QEvent) -&gt; bool\n</code></pre>"},{"location":"api/#lqtImageViewer.LqtImageViewport.get_color_picked_area","title":"get_color_picked_area","text":"<pre><code>get_color_picked_area() -&gt; Optional[QRect]\n</code></pre> <p>Return the area that is currently being color picked, in pixel scene coordinates.</p> <p>Retrun None if no area is being picked right now.</p>"},{"location":"api/#lqtImageViewer.LqtImageViewport.keyPressEvent","title":"keyPressEvent","text":"<pre><code>keyPressEvent(event: QKeyEvent)\n</code></pre> <p>Handle some user shortcuts that cannot be handled at lower level (view/graphics).</p>"},{"location":"api/#lqtImageViewer.LqtImageViewport.rotate_image_90","title":"rotate_image_90","text":"<pre><code>rotate_image_90(\n    angle: int, add_existing: bool = True\n) -&gt; Optional[int]\n</code></pre> <p>Rotate the image displayed by 90degree.</p> <p>The developer is reponsible to also rotate its initial array that was passed to this ImageViewport, so it is in sync with this one.</p> <p>Note the rotation is still stored even if there is no image set.</p> <p>Parameters:</p> <ul> <li> <code>angle</code>               (<code>int</code>)           \u2013            <p>must be a 90 degree increment (positive or negative)</p> </li> <li> <code>add_existing</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>True to add the given angle to the current one.</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>Optional[int]</code>           \u2013            <p>final angle used to rotate the image</p> </li> </ul>"},{"location":"api/#lqtImageViewer.LqtImageViewport.set_image_from_array","title":"set_image_from_array","text":"<pre><code>set_image_from_array(array: ndarray)\n</code></pre> <p>Set the image displayed, from a numpy array.</p> <p>Parameters:</p> <ul> <li> <code>array</code>               (<code>ndarray</code>)           \u2013            <p>SHOULD be an uint16 R-G-B-A array (4 channels), else the method will     try to uniform it, so it become encoded as such.</p> </li> </ul>"},{"location":"api/#lqtImageViewer.LIVGraphicView","title":"LIVGraphicView","text":"<pre><code>LIVGraphicView(\n    scene: LIVGraphicScene,\n    key_shortcuts: Optional[LIVKeyShortcuts] = None,\n    background_style: Optional[BaseBackgroundStyle] = None,\n    background_library: list[BaseBackgroundStyle] = None,\n)\n</code></pre> <p>               Bases: <code>NavigableGraphicView</code></p> <p>The QGraphicsView responsible on displaying the QGraphicsScene.</p> <p>It handles background drawing and plugins management.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.background_library","title":"background_library","text":"<pre><code>background_library: list[BaseBackgroundStyle]\n</code></pre> <p>List of backgrounds styles the user can switch between.</p> <p>You can add a new background by appending directly to the returned object.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.background_style","title":"background_style","text":"<pre><code>background_style: BaseBackgroundStyle\n</code></pre> <p>Current background style being displayed.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.image_item","title":"image_item","text":"<pre><code>image_item: ImageItem\n</code></pre> <p>The current image being displayed.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.round_amount","title":"round_amount","text":"<pre><code>round_amount = 3\n</code></pre> <p>Number of decimals to keep for the zoom amount.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.states","title":"states","text":"<pre><code>states = GraphicViewState\n</code></pre> <p>Different cumulative states the view can be set to.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.zoom_enable","title":"zoom_enable","text":"<pre><code>zoom_enable = True\n</code></pre> <p>Used to disable zoom capabilities on subclasses</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.zoom_max","title":"zoom_max","text":"<pre><code>zoom_max = 20\n</code></pre> <p>Maximum amount of zoom for the user.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.zoom_min","title":"zoom_min","text":"<pre><code>zoom_min = 0.1\n</code></pre> <p>Minimum amount of zoom for the user.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.add_plugin","title":"add_plugin","text":"<pre><code>add_plugin(plugin: BasePluginType)\n</code></pre> <p>Add the given plugin to handle in the scene and view.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.center_image","title":"center_image","text":"<pre><code>center_image()\n</code></pre> <p>Center the view to the active image (no zoom).</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.drawBackground","title":"drawBackground","text":"<pre><code>drawBackground(painter: QPainter, rect: QRectF)\n</code></pre> <p>Generated a grid pattern as background.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.get_image_rect","title":"get_image_rect","text":"<pre><code>get_image_rect() -&gt; QRectF\n</code></pre> <p>Get the image area in scene coordinates relative to himself.</p> <p>(top-left start at 0,0)</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.keyPressEvent","title":"keyPressEvent","text":"<pre><code>keyPressEvent(event: QKeyEvent)\n</code></pre> <p>Configure key shortcuts.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.mouseMoveEvent","title":"mouseMoveEvent","text":"<pre><code>mouseMoveEvent(event: QMouseEvent)\n</code></pre>"},{"location":"api/#lqtImageViewer.LIVGraphicView.mousePressEvent","title":"mousePressEvent","text":"<pre><code>mousePressEvent(event: QMouseEvent)\n</code></pre> <p>On mouse button pressed, set states depending on buttons.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.mouseReleaseEvent","title":"mouseReleaseEvent","text":"<pre><code>mouseReleaseEvent(event: QMouseEvent)\n</code></pre> <p>On mouse button release, reset all variables.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicView.resizeEvent","title":"resizeEvent","text":"<pre><code>resizeEvent(event: QResizeEvent) -&gt; None\n</code></pre>"},{"location":"api/#lqtImageViewer.LIVGraphicView.wheelEvent","title":"wheelEvent","text":"<pre><code>wheelEvent(event: QWheelEvent) -&gt; None\n</code></pre> <p>On mouse wheel active, zoom the viewport.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicScene","title":"LIVGraphicScene","text":"<pre><code>LIVGraphicScene(image_item: ImageItem, *args, **kwargs)\n</code></pre> <p>               Bases: <code>QGraphicsScene</code></p> <p>A QGraphicsScene that holds the image to display.</p> <p>It also stores the shortcuts for user interaction.</p>"},{"location":"api/#lqtImageViewer.LIVGraphicScene.image_item","title":"image_item","text":"<pre><code>image_item: ImageItem\n</code></pre>"},{"location":"api/#lqtImageViewer.LIVGraphicScene.shortcuts","title":"shortcuts","text":"<pre><code>shortcuts: LIVKeyShortcuts\n</code></pre>"},{"location":"api/#lqtImageViewer.ImageItem","title":"ImageItem","text":"<pre><code>ImageItem(\n    parent: Optional[QGraphicsItem] = None,\n    default_image: Optional[QImage] = None,\n)\n</code></pre> <p>               Bases: <code>QGraphicsItem</code></p> <p>A QGraphicsItem that can draw a 2D image array on its surface.</p>"},{"location":"api/#lqtImageViewer.ImageItem.boundingRect","title":"boundingRect","text":"<pre><code>boundingRect() -&gt; QRectF\n</code></pre>"},{"location":"api/#lqtImageViewer.ImageItem.paint","title":"paint","text":"<pre><code>paint(\n    painter: QPainter,\n    option: QStyleOptionGraphicsItem,\n    widget: Optional[QWidget] = None,\n) -&gt; None\n</code></pre>"},{"location":"api/#lqtImageViewer.ImageItem.set_image_array","title":"set_image_array","text":"<pre><code>set_image_array(array: Optional[ndarray])\n</code></pre> References <ul> <li>[1] https://stackoverflow.com/a/55522279/13806195</li> </ul> <p>Parameters:</p> <ul> <li> <code>array</code>               (<code>Optional[ndarray]</code>)           \u2013            <p>MUST be an uint16 R-G-B-A array (4 channels)</p> </li> </ul>"},{"location":"api/#lqtImageViewer.config","title":"config","text":"<p>Objects that can be used to affect the behavior of the viewer.</p>"},{"location":"api/#lqtImageViewer.BaseBackgroundStyle","title":"BaseBackgroundStyle","text":"<pre><code>BaseBackgroundStyle(\n    label: str,\n    background: QColor,\n    foreground: QColor,\n    use_background_texture: bool = True,\n    texture_zoom_range: tuple[\n        Optional[float], Optional[float]\n    ] = (0.3, None),\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>label</code>               (<code>str</code>)           \u2013            <p>a pretty name for this style</p> </li> <li> <code>background</code>               (<code>QColor</code>)           \u2013            <p>the primary color of the background</p> </li> <li> <code>foreground</code>               (<code>QColor</code>)           \u2013            <p>a second color to layer on top of the background</p> </li> <li> <code>use_background_texture</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>False indicate we don't care about using a texture for the background (<code>generate_background_texture</code> is not implemented).</p> </li> <li> <code>texture_zoom_range</code>               (<code>tuple[Optional[float], Optional[float]]</code>, default:                   <code>(0.3, None)</code> )           \u2013            <p>allow to hide the background texture depending on the view zoom level. zoom range is [0-1+] where 1 == no zoom</p> </li> </ul>"},{"location":"api/#lqtImageViewer.BaseBackgroundStyle.label","title":"label","text":"<pre><code>label = label\n</code></pre>"},{"location":"api/#lqtImageViewer.BaseBackgroundStyle.primary","title":"primary","text":"<pre><code>primary = background\n</code></pre>"},{"location":"api/#lqtImageViewer.BaseBackgroundStyle.secondary","title":"secondary","text":"<pre><code>secondary = foreground\n</code></pre>"},{"location":"api/#lqtImageViewer.BaseBackgroundStyle.texture_zoom_range","title":"texture_zoom_range","text":"<pre><code>texture_zoom_range = texture_zoom_range\n</code></pre>"},{"location":"api/#lqtImageViewer.BaseBackgroundStyle.use_background_texture","title":"use_background_texture","text":"<pre><code>use_background_texture = use_background_texture\n</code></pre>"},{"location":"api/#lqtImageViewer.BaseBackgroundStyle.generate_background_brush","title":"generate_background_brush","text":"<pre><code>generate_background_brush(draw_texture: bool) -&gt; QBrush\n</code></pre> <p>Return the QBrush to use for drawing backgrounds.</p>"},{"location":"api/#lqtImageViewer.BaseBackgroundStyle.generate_background_texture","title":"generate_background_texture","text":"<pre><code>generate_background_texture() -&gt; Optional[QPixmap]\n</code></pre> <p>Generate a QPixmap to tile in a QBrush.</p> <p>It is recommended to create a large pattern as this one will be scale down in the view, so zooming will not produce pixelised preview.</p>"},{"location":"api/#lqtImageViewer.BaseBackgroundStyle.should_use_background_texture","title":"should_use_background_texture","text":"<pre><code>should_use_background_texture(\n    zoom: Optional[float] = None,\n) -&gt; bool\n</code></pre> <p>Return True if the instance config imply that the backgroudn texture must be used.</p>"},{"location":"api/#lqtImageViewer.LIVKeyShortcut","title":"LIVKeyShortcut","text":"<pre><code>LIVKeyShortcut(\n    key: Union[Key, MouseButton],\n    modifiers: Optional[tuple[KeyboardModifier, ...]],\n    modifier_matching: ShortcutModifierMatching = exact,\n)\n</code></pre> <p>Store a unique combinations of key to verify it matches against Qt QEvent.</p>"},{"location":"api/#lqtImageViewer.LIVKeyShortcut.key","title":"key","text":"<pre><code>key: Union[Key, MouseButton]\n</code></pre> <p>Main input to match the event against</p>"},{"location":"api/#lqtImageViewer.LIVKeyShortcut.modifier_matching","title":"modifier_matching","text":"<pre><code>modifier_matching: ShortcutModifierMatching = exact\n</code></pre> <p>Determine how strict the modifier must be matched against the event</p>"},{"location":"api/#lqtImageViewer.LIVKeyShortcut.modifiers","title":"modifiers","text":"<pre><code>modifiers: Optional[tuple[KeyboardModifier, ...]]\n</code></pre> <p>Modifiers keys that must be active along the main key to be matched.</p> <ul> <li>None means to ignore modifiers.</li> <li>To specify that you don't want modifier pass an empty tuple.</li> </ul>"},{"location":"api/#lqtImageViewer.LIVKeyShortcut.match_event","title":"match_event","text":"<pre><code>match_event(\n    event: QEvent,\n    modifier_matching: Optional[\n        ShortcutModifierMatching\n    ] = None,\n)\n</code></pre> <p>Return True if the given event match this shortcut.</p>"},{"location":"api/#lqtImageViewer.BasePluginType","title":"BasePluginType","text":"<pre><code>BasePluginType = BaseScreenSpacePlugin\n</code></pre>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin","title":"BaseScreenSpacePlugin","text":"<pre><code>BaseScreenSpacePlugin()\n</code></pre> <p>               Bases: <code>QGraphicsItem</code></p> <p>A special QGraphicsItem ignoring view transformations to allow drawing screenspace effect.</p> <p>As an example zooming the view will not affect the width of a line drawn in this item.</p> <p>Assuming we have an image of size 128,128 where top left is at 0,0 in scene coordinates :</p> <ul> <li>with no zoom the bottom right is at 128,128 in scene coordinates AND screenspace ones</li> <li>with a zoom-in (image bigger), scene coordinates doesn't move but screenspace become bigger</li> <li>with a zoom-out (image smaller), scene coordinates doesn't move but screenspace become smaller</li> </ul>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.image_item","title":"image_item","text":"<pre><code>image_item: Optional[ImageItem]\n</code></pre> <p>The image item living in the same scene as this plugin.</p> <p>Return None if the plugin hasn't been loaded into a scene yet.</p>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.image_scene_rect","title":"image_scene_rect","text":"<pre><code>image_scene_rect: Optional[QRectF]\n</code></pre> <p>Rectangular area of the image in screenspace coordinates (already mapped).</p> <p>Return None if the plugin hasn't been loaded into a scene yet.</p>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.shortcuts","title":"shortcuts","text":"<pre><code>shortcuts: Optional[LIVKeyShortcuts]\n</code></pre> <p>Key shortcuts curtenly configured for the application.</p>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.transform","title":"transform","text":"<pre><code>transform: QTransform\n</code></pre> <p>Transform matrix to apply for converting from and to image coordinates</p>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.boundingRect","title":"boundingRect","text":"<pre><code>boundingRect() -&gt; QRectF\n</code></pre>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.map_from_screenspace","title":"map_from_screenspace","text":"<pre><code>map_from_screenspace(obj: QPainterPath) -&gt; QPainterPath\n</code></pre><pre><code>map_from_screenspace(obj: QPoint) -&gt; QPoint\n</code></pre><pre><code>map_from_screenspace(obj: QPointF) -&gt; QPointF\n</code></pre><pre><code>map_from_screenspace(obj: QRect) -&gt; QRect\n</code></pre><pre><code>map_from_screenspace(obj: QRectF) -&gt; QRectF\n</code></pre><pre><code>map_from_screenspace(obj: QPolygon) -&gt; QPolygon\n</code></pre><pre><code>map_from_screenspace(obj: QPolygonF) -&gt; QPolygonF\n</code></pre> <pre><code>map_from_screenspace(obj)\n</code></pre> <p>Convert screenspace scene coordinates to image world scene coordinates.</p>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.map_to_screenspace","title":"map_to_screenspace","text":"<pre><code>map_to_screenspace(obj: QPainterPath) -&gt; QPainterPath\n</code></pre><pre><code>map_to_screenspace(obj: QPoint) -&gt; QPoint\n</code></pre><pre><code>map_to_screenspace(obj: QPointF) -&gt; QPointF\n</code></pre><pre><code>map_to_screenspace(obj: QRect) -&gt; QRect\n</code></pre><pre><code>map_to_screenspace(obj: QRectF) -&gt; QRectF\n</code></pre><pre><code>map_to_screenspace(obj: QPolygon) -&gt; QPolygon\n</code></pre><pre><code>map_to_screenspace(obj: QPolygonF) -&gt; QPolygonF\n</code></pre> <pre><code>map_to_screenspace(obj)\n</code></pre> <p>Convert image world scene coordinates to screenspace scene coordinates.</p> <p>Watch out as the transformation might round float values !</p>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.on_image_changed","title":"on_image_changed","text":"<pre><code>on_image_changed()\n</code></pre> <p>This method is called right after a new image has been loaded.</p> <p>You can override it and perform action to update your plugin with the new image. The base implementation does nothing.</p> <p>Note that the <code>reload</code> method is called just before this callback.</p>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.paint","title":"paint","text":"<pre><code>paint(\n    painter: QPainter,\n    option: QStyleOptionGraphicsItem,\n    widget: Optional[QWidget] = None,\n) -&gt; None\n</code></pre>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.reload","title":"reload","text":"<pre><code>reload()\n</code></pre> <p>Perform any action necessary for the plugin to be reloaded visually.</p> <p>Made to be overriden, don't forget to call super at the end.</p>"},{"location":"api/#lqtImageViewer.BaseScreenSpacePlugin.set_visibility_from_scene_event","title":"set_visibility_from_scene_event","text":"<pre><code>set_visibility_from_scene_event(event: QEvent)\n</code></pre> <p>Method to override in super class that can be used to show or hide the plugin based on the current events.</p> <p>You are responsible for calling show() or hide() properly and not overriding any existing shortcuts.</p> <p>Parameters:</p> <ul> <li> <code>event</code>               (<code>QEvent</code>)           \u2013            <p>arbitrary event send to the graphics scene</p> </li> </ul>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin","title":"ColorPickerPlugin","text":"<pre><code>ColorPickerPlugin()\n</code></pre> <p>               Bases: <code>BaseScreenSpacePlugin</code></p> <p>A screenspace plugin which allow to select a pixel area on an image.</p> <p>The plugin doesn't actually handle any pixel picking, it just returns an area and its up to the developer to extract the color values from the image array.</p>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.image_item","title":"image_item","text":"<pre><code>image_item: Optional[ImageItem]\n</code></pre> <p>The image item living in the same scene as this plugin.</p> <p>Return None if the plugin hasn't been loaded into a scene yet.</p>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.image_scene_rect","title":"image_scene_rect","text":"<pre><code>image_scene_rect: Optional[QRectF]\n</code></pre> <p>Rectangular area of the image in screenspace coordinates (already mapped).</p> <p>Return None if the plugin hasn't been loaded into a scene yet.</p>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.shortcuts","title":"shortcuts","text":"<pre><code>shortcuts: Optional[LIVKeyShortcuts]\n</code></pre> <p>Key shortcuts curtenly configured for the application.</p>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.signals","title":"signals","text":"<pre><code>signals = _Signals()\n</code></pre>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.states","title":"states","text":"<pre><code>states = ColorPickerControlState\n</code></pre>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.transform","title":"transform","text":"<pre><code>transform: QTransform\n</code></pre> <p>Transform matrix to apply for converting from and to image coordinates</p>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.boundingRect","title":"boundingRect","text":"<pre><code>boundingRect() -&gt; QRectF\n</code></pre>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.get_picked_area","title":"get_picked_area","text":"<pre><code>get_picked_area() -&gt; QRect\n</code></pre> <p>Return the area that is currently being picked, in image scene coordinates.</p>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.map_from_screenspace","title":"map_from_screenspace","text":"<pre><code>map_from_screenspace(obj: QPainterPath) -&gt; QPainterPath\n</code></pre><pre><code>map_from_screenspace(obj: QPoint) -&gt; QPoint\n</code></pre><pre><code>map_from_screenspace(obj: QPointF) -&gt; QPointF\n</code></pre><pre><code>map_from_screenspace(obj: QRect) -&gt; QRect\n</code></pre><pre><code>map_from_screenspace(obj: QRectF) -&gt; QRectF\n</code></pre><pre><code>map_from_screenspace(obj: QPolygon) -&gt; QPolygon\n</code></pre><pre><code>map_from_screenspace(obj: QPolygonF) -&gt; QPolygonF\n</code></pre> <pre><code>map_from_screenspace(obj)\n</code></pre> <p>Convert screenspace scene coordinates to image world scene coordinates.</p>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.map_to_screenspace","title":"map_to_screenspace","text":"<pre><code>map_to_screenspace(obj: QPainterPath) -&gt; QPainterPath\n</code></pre><pre><code>map_to_screenspace(obj: QPoint) -&gt; QPoint\n</code></pre><pre><code>map_to_screenspace(obj: QPointF) -&gt; QPointF\n</code></pre><pre><code>map_to_screenspace(obj: QRect) -&gt; QRect\n</code></pre><pre><code>map_to_screenspace(obj: QRectF) -&gt; QRectF\n</code></pre><pre><code>map_to_screenspace(obj: QPolygon) -&gt; QPolygon\n</code></pre><pre><code>map_to_screenspace(obj: QPolygonF) -&gt; QPolygonF\n</code></pre> <pre><code>map_to_screenspace(obj)\n</code></pre> <p>Convert image world scene coordinates to screenspace scene coordinates.</p> <p>Watch out as the transformation might round float values !</p>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.mouseMoveEvent","title":"mouseMoveEvent","text":"<pre><code>mouseMoveEvent(event: QGraphicsSceneMouseEvent)\n</code></pre>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.mousePressEvent","title":"mousePressEvent","text":"<pre><code>mousePressEvent(event: QGraphicsSceneMouseEvent)\n</code></pre>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.mouseReleaseEvent","title":"mouseReleaseEvent","text":"<pre><code>mouseReleaseEvent(event: QGraphicsSceneMouseEvent)\n</code></pre>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.on_image_changed","title":"on_image_changed","text":"<pre><code>on_image_changed()\n</code></pre>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.paint","title":"paint","text":"<pre><code>paint(\n    painter: QPainter,\n    option: QStyleOptionGraphicsItem,\n    widget: Optional[QWidget] = None,\n) -&gt; None\n</code></pre>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.reload","title":"reload","text":"<pre><code>reload()\n</code></pre> <p>Perform any action necessary for the plugin to be reloaded visually.</p> <p>Made to be overriden, don't forget to call super at the end.</p>"},{"location":"api/#lqtImageViewer.ColorPickerPlugin.set_visibility_from_scene_event","title":"set_visibility_from_scene_event","text":"<pre><code>set_visibility_from_scene_event(event: QEvent)\n</code></pre>"},{"location":"api/#lqtImageViewer.convert_bit_depth","title":"convert_bit_depth","text":"<pre><code>convert_bit_depth(\n    array: ndarray, bit_depth: DTypeLike = float32\n) -&gt; ndarray\n</code></pre> <p>Convert given array to given bit-depth, the current bit-depth of the array is used to determine the appropriate conversion path.</p> References <ul> <li>[1] https://github.com/colour-science/colour/blob/develop/colour/io/image.py</li> </ul>"},{"location":"api/#lqtImageViewer.ensure_rgba_array","title":"ensure_rgba_array","text":"<pre><code>ensure_rgba_array(array: ndarray) -&gt; ndarray\n</code></pre> <p>Ensure the given array has an alpha channel, if not create one with maximum value.</p> <p>Parameters:</p> <ul> <li> <code>array</code>               (<code>ndarray</code>)           \u2013            <p>any arbitrary image array</p> </li> </ul> <p>Returns:</p> <ul> <li> <code>ndarray</code>           \u2013            <p>new RGBA array instance</p> </li> </ul>"},{"location":"api/config/","title":"lqtImageViewer.config","text":"<p>Those are the available objects that can be imported from :</p> <pre><code>import lqtImageViewer.config\n</code></pre> <p>Objects that can be used to affect the behavior of the viewer.</p>"},{"location":"api/config/#lqtImageViewer.config.DEFAULT_BACKGROUND","title":"DEFAULT_BACKGROUND","text":"<pre><code>DEFAULT_BACKGROUND = DEFAULT_BACKGROUND_LIBRARY[-3]\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.DEFAULT_BACKGROUND_LIBRARY","title":"DEFAULT_BACKGROUND_LIBRARY","text":"<pre><code>DEFAULT_BACKGROUND_LIBRARY: list[BaseBackgroundStyle] = [\n    BaseBackgroundStyle(\n        \"Light\",\n        QColor(240, 240, 238),\n        QColor(200, 200, 200),\n    ),\n    DottedBackgroundStyle(\n        \"Light Grid of Dots\",\n        QColor(240, 240, 238),\n        QColor(200, 200, 200),\n    ),\n    BaseBackgroundStyle(\n        \"Mid Grey\",\n        QColor(125, 125, 125),\n        QColor(100, 100, 100),\n    ),\n    DottedBackgroundStyle(\n        \"Black Grid of Dots\",\n        QColor(0, 0, 0),\n        QColor(30, 30, 30),\n    ),\n    BaseBackgroundStyle(\n        \"Black\", QColor(0, 0, 0), QColor(30, 30, 30)\n    ),\n    DottedBackgroundStyle(\n        \"Dark Grid of Dots\",\n        QColor(25, 25, 25),\n        QColor(18, 18, 18),\n    ),\n]\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.BaseBackgroundStyle","title":"BaseBackgroundStyle","text":"<pre><code>BaseBackgroundStyle(\n    label: str,\n    background: QColor,\n    foreground: QColor,\n    use_background_texture: bool = True,\n    texture_zoom_range: tuple[\n        Optional[float], Optional[float]\n    ] = (0.3, None),\n)\n</code></pre> <p>Parameters:</p> <ul> <li> <code>label</code>               (<code>str</code>)           \u2013            <p>a pretty name for this style</p> </li> <li> <code>background</code>               (<code>QColor</code>)           \u2013            <p>the primary color of the background</p> </li> <li> <code>foreground</code>               (<code>QColor</code>)           \u2013            <p>a second color to layer on top of the background</p> </li> <li> <code>use_background_texture</code>               (<code>bool</code>, default:                   <code>True</code> )           \u2013            <p>False indicate we don't care about using a texture for the background (<code>generate_background_texture</code> is not implemented).</p> </li> <li> <code>texture_zoom_range</code>               (<code>tuple[Optional[float], Optional[float]]</code>, default:                   <code>(0.3, None)</code> )           \u2013            <p>allow to hide the background texture depending on the view zoom level. zoom range is [0-1+] where 1 == no zoom</p> </li> </ul>"},{"location":"api/config/#lqtImageViewer.config.BaseBackgroundStyle.label","title":"label","text":"<pre><code>label = label\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.BaseBackgroundStyle.primary","title":"primary","text":"<pre><code>primary = background\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.BaseBackgroundStyle.secondary","title":"secondary","text":"<pre><code>secondary = foreground\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.BaseBackgroundStyle.texture_zoom_range","title":"texture_zoom_range","text":"<pre><code>texture_zoom_range = texture_zoom_range\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.BaseBackgroundStyle.use_background_texture","title":"use_background_texture","text":"<pre><code>use_background_texture = use_background_texture\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.BaseBackgroundStyle.generate_background_brush","title":"generate_background_brush","text":"<pre><code>generate_background_brush(draw_texture: bool) -&gt; QBrush\n</code></pre> <p>Return the QBrush to use for drawing backgrounds.</p>"},{"location":"api/config/#lqtImageViewer.config.BaseBackgroundStyle.generate_background_texture","title":"generate_background_texture","text":"<pre><code>generate_background_texture() -&gt; Optional[QPixmap]\n</code></pre> <p>Generate a QPixmap to tile in a QBrush.</p> <p>It is recommended to create a large pattern as this one will be scale down in the view, so zooming will not produce pixelised preview.</p>"},{"location":"api/config/#lqtImageViewer.config.BaseBackgroundStyle.should_use_background_texture","title":"should_use_background_texture","text":"<pre><code>should_use_background_texture(\n    zoom: Optional[float] = None,\n) -&gt; bool\n</code></pre> <p>Return True if the instance config imply that the backgroudn texture must be used.</p>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcut","title":"LIVKeyShortcut","text":"<pre><code>LIVKeyShortcut(\n    key: Union[Key, MouseButton],\n    modifiers: Optional[tuple[KeyboardModifier, ...]],\n    modifier_matching: ShortcutModifierMatching = exact,\n)\n</code></pre> <p>Store a unique combinations of key to verify it matches against Qt QEvent.</p>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcut.key","title":"key","text":"<pre><code>key: Union[Key, MouseButton]\n</code></pre> <p>Main input to match the event against</p>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcut.modifier_matching","title":"modifier_matching","text":"<pre><code>modifier_matching: ShortcutModifierMatching = exact\n</code></pre> <p>Determine how strict the modifier must be matched against the event</p>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcut.modifiers","title":"modifiers","text":"<pre><code>modifiers: Optional[tuple[KeyboardModifier, ...]]\n</code></pre> <p>Modifiers keys that must be active along the main key to be matched.</p> <ul> <li>None means to ignore modifiers.</li> <li>To specify that you don't want modifier pass an empty tuple.</li> </ul>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcut.match_event","title":"match_event","text":"<pre><code>match_event(\n    event: QEvent,\n    modifier_matching: Optional[\n        ShortcutModifierMatching\n    ] = None,\n)\n</code></pre> <p>Return True if the given event match this shortcut.</p>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts","title":"LIVKeyShortcuts","text":"<pre><code>LIVKeyShortcuts(\n    reset_zoom: LIVKeyShortcut,\n    change_background: LIVKeyShortcut,\n    reset_pan: LIVKeyShortcut,\n    pan1: LIVKeyShortcut,\n    pan2: LIVKeyShortcut,\n    zoom2: LIVKeyShortcut,\n    pick: LIVKeyShortcut,\n    pick_area_start: LIVKeyShortcut,\n    pick_area_expand: LIVKeyShortcut,\n    unpick: LIVKeyShortcut,\n    view_coordinates1: LIVKeyShortcut,\n    view_coordinates2: LIVKeyShortcut,\n    set_coordinates_tiles: LIVKeyShortcut,\n    rotate_90_up: LIVKeyShortcut,\n    rotate_90_down: LIVKeyShortcut,\n    clear: LIVKeyShortcut,\n)\n</code></pre> <p>Mapping of shortcuts with their intended usage across the image viewer.</p>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.change_background","title":"change_background","text":"<pre><code>change_background: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.clear","title":"clear","text":"<pre><code>clear: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.pan1","title":"pan1","text":"<pre><code>pan1: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.pan2","title":"pan2","text":"<pre><code>pan2: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.pick","title":"pick","text":"<pre><code>pick: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.pick_area_expand","title":"pick_area_expand","text":"<pre><code>pick_area_expand: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.pick_area_start","title":"pick_area_start","text":"<pre><code>pick_area_start: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.reset_pan","title":"reset_pan","text":"<pre><code>reset_pan: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.reset_zoom","title":"reset_zoom","text":"<pre><code>reset_zoom: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.rotate_90_down","title":"rotate_90_down","text":"<pre><code>rotate_90_down: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.rotate_90_up","title":"rotate_90_up","text":"<pre><code>rotate_90_up: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.set_coordinates_tiles","title":"set_coordinates_tiles","text":"<pre><code>set_coordinates_tiles: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.unpick","title":"unpick","text":"<pre><code>unpick: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.view_coordinates1","title":"view_coordinates1","text":"<pre><code>view_coordinates1: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.view_coordinates2","title":"view_coordinates2","text":"<pre><code>view_coordinates2: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.zoom2","title":"zoom2","text":"<pre><code>zoom2: LIVKeyShortcut\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.get_default","title":"get_default","text":"<pre><code>get_default()\n</code></pre> <p>Generate an instance with defaults key bindings.</p>"},{"location":"api/config/#lqtImageViewer.config.LIVKeyShortcuts.get_event_matching_shortcut","title":"get_event_matching_shortcut","text":"<pre><code>get_event_matching_shortcut(\n    event: QEvent,\n) -&gt; Optional[LIVKeyShortcut]\n</code></pre> <p>Get the shortcut that match the given event or None if not found.</p>"},{"location":"api/config/#lqtImageViewer.config.ShortcutModifierMatching","title":"ShortcutModifierMatching","text":"<p>               Bases: <code>Enum</code></p> <p>Amount of precision required to match an event modifiers against a known collection of modifiers.</p>"},{"location":"api/config/#lqtImageViewer.config.ShortcutModifierMatching.contains_all","title":"contains_all","text":"<pre><code>contains_all = auto()\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.ShortcutModifierMatching.contains_any","title":"contains_any","text":"<pre><code>contains_any = auto()\n</code></pre>"},{"location":"api/config/#lqtImageViewer.config.ShortcutModifierMatching.exact","title":"exact","text":"<pre><code>exact = auto()\n</code></pre>"},{"location":"api/plugins/","title":"lqtImageViewer.plugins","text":"<p>Those are the available objects that can be imported from :</p> <pre><code>import lqtImageViewer.plugins\n</code></pre> <p>A plugin system to add arbitary QGraphicItem over the viewport.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.BasePluginType","title":"BasePluginType","text":"<pre><code>BasePluginType = BaseScreenSpacePlugin\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin","title":"BaseScreenSpacePlugin","text":"<pre><code>BaseScreenSpacePlugin()\n</code></pre> <p>               Bases: <code>QGraphicsItem</code></p> <p>A special QGraphicsItem ignoring view transformations to allow drawing screenspace effect.</p> <p>As an example zooming the view will not affect the width of a line drawn in this item.</p> <p>Assuming we have an image of size 128,128 where top left is at 0,0 in scene coordinates :</p> <ul> <li>with no zoom the bottom right is at 128,128 in scene coordinates AND screenspace ones</li> <li>with a zoom-in (image bigger), scene coordinates doesn't move but screenspace become bigger</li> <li>with a zoom-out (image smaller), scene coordinates doesn't move but screenspace become smaller</li> </ul>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.image_item","title":"image_item","text":"<pre><code>image_item: Optional[ImageItem]\n</code></pre> <p>The image item living in the same scene as this plugin.</p> <p>Return None if the plugin hasn't been loaded into a scene yet.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.image_scene_rect","title":"image_scene_rect","text":"<pre><code>image_scene_rect: Optional[QRectF]\n</code></pre> <p>Rectangular area of the image in screenspace coordinates (already mapped).</p> <p>Return None if the plugin hasn't been loaded into a scene yet.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.shortcuts","title":"shortcuts","text":"<pre><code>shortcuts: Optional[LIVKeyShortcuts]\n</code></pre> <p>Key shortcuts curtenly configured for the application.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.transform","title":"transform","text":"<pre><code>transform: QTransform\n</code></pre> <p>Transform matrix to apply for converting from and to image coordinates</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.boundingRect","title":"boundingRect","text":"<pre><code>boundingRect() -&gt; QRectF\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.map_from_screenspace","title":"map_from_screenspace","text":"<pre><code>map_from_screenspace(obj: QPainterPath) -&gt; QPainterPath\n</code></pre><pre><code>map_from_screenspace(obj: QPoint) -&gt; QPoint\n</code></pre><pre><code>map_from_screenspace(obj: QPointF) -&gt; QPointF\n</code></pre><pre><code>map_from_screenspace(obj: QRect) -&gt; QRect\n</code></pre><pre><code>map_from_screenspace(obj: QRectF) -&gt; QRectF\n</code></pre><pre><code>map_from_screenspace(obj: QPolygon) -&gt; QPolygon\n</code></pre><pre><code>map_from_screenspace(obj: QPolygonF) -&gt; QPolygonF\n</code></pre> <pre><code>map_from_screenspace(obj)\n</code></pre> <p>Convert screenspace scene coordinates to image world scene coordinates.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.map_to_screenspace","title":"map_to_screenspace","text":"<pre><code>map_to_screenspace(obj: QPainterPath) -&gt; QPainterPath\n</code></pre><pre><code>map_to_screenspace(obj: QPoint) -&gt; QPoint\n</code></pre><pre><code>map_to_screenspace(obj: QPointF) -&gt; QPointF\n</code></pre><pre><code>map_to_screenspace(obj: QRect) -&gt; QRect\n</code></pre><pre><code>map_to_screenspace(obj: QRectF) -&gt; QRectF\n</code></pre><pre><code>map_to_screenspace(obj: QPolygon) -&gt; QPolygon\n</code></pre><pre><code>map_to_screenspace(obj: QPolygonF) -&gt; QPolygonF\n</code></pre> <pre><code>map_to_screenspace(obj)\n</code></pre> <p>Convert image world scene coordinates to screenspace scene coordinates.</p> <p>Watch out as the transformation might round float values !</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.on_image_changed","title":"on_image_changed","text":"<pre><code>on_image_changed()\n</code></pre> <p>This method is called right after a new image has been loaded.</p> <p>You can override it and perform action to update your plugin with the new image. The base implementation does nothing.</p> <p>Note that the <code>reload</code> method is called just before this callback.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.paint","title":"paint","text":"<pre><code>paint(\n    painter: QPainter,\n    option: QStyleOptionGraphicsItem,\n    widget: Optional[QWidget] = None,\n) -&gt; None\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.reload","title":"reload","text":"<pre><code>reload()\n</code></pre> <p>Perform any action necessary for the plugin to be reloaded visually.</p> <p>Made to be overriden, don't forget to call super at the end.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.BaseScreenSpacePlugin.set_visibility_from_scene_event","title":"set_visibility_from_scene_event","text":"<pre><code>set_visibility_from_scene_event(event: QEvent)\n</code></pre> <p>Method to override in super class that can be used to show or hide the plugin based on the current events.</p> <p>You are responsible for calling show() or hide() properly and not overriding any existing shortcuts.</p> <p>Parameters:</p> <ul> <li> <code>event</code>               (<code>QEvent</code>)           \u2013            <p>arbitrary event send to the graphics scene</p> </li> </ul>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin","title":"ColorPickerPlugin","text":"<pre><code>ColorPickerPlugin()\n</code></pre> <p>               Bases: <code>BaseScreenSpacePlugin</code></p> <p>A screenspace plugin which allow to select a pixel area on an image.</p> <p>The plugin doesn't actually handle any pixel picking, it just returns an area and its up to the developer to extract the color values from the image array.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.image_item","title":"image_item","text":"<pre><code>image_item: Optional[ImageItem]\n</code></pre> <p>The image item living in the same scene as this plugin.</p> <p>Return None if the plugin hasn't been loaded into a scene yet.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.image_scene_rect","title":"image_scene_rect","text":"<pre><code>image_scene_rect: Optional[QRectF]\n</code></pre> <p>Rectangular area of the image in screenspace coordinates (already mapped).</p> <p>Return None if the plugin hasn't been loaded into a scene yet.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.shortcuts","title":"shortcuts","text":"<pre><code>shortcuts: Optional[LIVKeyShortcuts]\n</code></pre> <p>Key shortcuts curtenly configured for the application.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.signals","title":"signals","text":"<pre><code>signals = _Signals()\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.states","title":"states","text":"<pre><code>states = ColorPickerControlState\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.transform","title":"transform","text":"<pre><code>transform: QTransform\n</code></pre> <p>Transform matrix to apply for converting from and to image coordinates</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.boundingRect","title":"boundingRect","text":"<pre><code>boundingRect() -&gt; QRectF\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.get_picked_area","title":"get_picked_area","text":"<pre><code>get_picked_area() -&gt; QRect\n</code></pre> <p>Return the area that is currently being picked, in image scene coordinates.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.map_from_screenspace","title":"map_from_screenspace","text":"<pre><code>map_from_screenspace(obj: QPainterPath) -&gt; QPainterPath\n</code></pre><pre><code>map_from_screenspace(obj: QPoint) -&gt; QPoint\n</code></pre><pre><code>map_from_screenspace(obj: QPointF) -&gt; QPointF\n</code></pre><pre><code>map_from_screenspace(obj: QRect) -&gt; QRect\n</code></pre><pre><code>map_from_screenspace(obj: QRectF) -&gt; QRectF\n</code></pre><pre><code>map_from_screenspace(obj: QPolygon) -&gt; QPolygon\n</code></pre><pre><code>map_from_screenspace(obj: QPolygonF) -&gt; QPolygonF\n</code></pre> <pre><code>map_from_screenspace(obj)\n</code></pre> <p>Convert screenspace scene coordinates to image world scene coordinates.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.map_to_screenspace","title":"map_to_screenspace","text":"<pre><code>map_to_screenspace(obj: QPainterPath) -&gt; QPainterPath\n</code></pre><pre><code>map_to_screenspace(obj: QPoint) -&gt; QPoint\n</code></pre><pre><code>map_to_screenspace(obj: QPointF) -&gt; QPointF\n</code></pre><pre><code>map_to_screenspace(obj: QRect) -&gt; QRect\n</code></pre><pre><code>map_to_screenspace(obj: QRectF) -&gt; QRectF\n</code></pre><pre><code>map_to_screenspace(obj: QPolygon) -&gt; QPolygon\n</code></pre><pre><code>map_to_screenspace(obj: QPolygonF) -&gt; QPolygonF\n</code></pre> <pre><code>map_to_screenspace(obj)\n</code></pre> <p>Convert image world scene coordinates to screenspace scene coordinates.</p> <p>Watch out as the transformation might round float values !</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.mouseMoveEvent","title":"mouseMoveEvent","text":"<pre><code>mouseMoveEvent(event: QGraphicsSceneMouseEvent)\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.mousePressEvent","title":"mousePressEvent","text":"<pre><code>mousePressEvent(event: QGraphicsSceneMouseEvent)\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.mouseReleaseEvent","title":"mouseReleaseEvent","text":"<pre><code>mouseReleaseEvent(event: QGraphicsSceneMouseEvent)\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.on_image_changed","title":"on_image_changed","text":"<pre><code>on_image_changed()\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.paint","title":"paint","text":"<pre><code>paint(\n    painter: QPainter,\n    option: QStyleOptionGraphicsItem,\n    widget: Optional[QWidget] = None,\n) -&gt; None\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.reload","title":"reload","text":"<pre><code>reload()\n</code></pre> <p>Perform any action necessary for the plugin to be reloaded visually.</p> <p>Made to be overriden, don't forget to call super at the end.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.ColorPickerPlugin.set_visibility_from_scene_event","title":"set_visibility_from_scene_event","text":"<pre><code>set_visibility_from_scene_event(event: QEvent)\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin","title":"CoordinatesGridPlugin","text":"<pre><code>CoordinatesGridPlugin()\n</code></pre> <p>               Bases: <code>BaseScreenSpacePlugin</code></p> <p>A screensapce plugin that display a grid of image pixel coordinates.</p> <p>The gris is made of \"tiles\" which amount can be controlled using a shortcut. The intersection of each tile is a point that will draw its coordinates.</p> <p>The plugin is only visible when a certain combination of key is pressed.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.image_item","title":"image_item","text":"<pre><code>image_item: Optional[ImageItem]\n</code></pre> <p>The image item living in the same scene as this plugin.</p> <p>Return None if the plugin hasn't been loaded into a scene yet.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.image_scene_rect","title":"image_scene_rect","text":"<pre><code>image_scene_rect: Optional[QRectF]\n</code></pre> <p>Rectangular area of the image in screenspace coordinates (already mapped).</p> <p>Return None if the plugin hasn't been loaded into a scene yet.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.shortcuts","title":"shortcuts","text":"<pre><code>shortcuts: Optional[LIVKeyShortcuts]\n</code></pre> <p>Key shortcuts curtenly configured for the application.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.transform","title":"transform","text":"<pre><code>transform: QTransform\n</code></pre> <p>Transform matrix to apply for converting from and to image coordinates</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.boundingRect","title":"boundingRect","text":"<pre><code>boundingRect() -&gt; QRectF\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.map_from_screenspace","title":"map_from_screenspace","text":"<pre><code>map_from_screenspace(obj: QPainterPath) -&gt; QPainterPath\n</code></pre><pre><code>map_from_screenspace(obj: QPoint) -&gt; QPoint\n</code></pre><pre><code>map_from_screenspace(obj: QPointF) -&gt; QPointF\n</code></pre><pre><code>map_from_screenspace(obj: QRect) -&gt; QRect\n</code></pre><pre><code>map_from_screenspace(obj: QRectF) -&gt; QRectF\n</code></pre><pre><code>map_from_screenspace(obj: QPolygon) -&gt; QPolygon\n</code></pre><pre><code>map_from_screenspace(obj: QPolygonF) -&gt; QPolygonF\n</code></pre> <pre><code>map_from_screenspace(obj)\n</code></pre> <p>Convert screenspace scene coordinates to image world scene coordinates.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.map_to_screenspace","title":"map_to_screenspace","text":"<pre><code>map_to_screenspace(obj: QPainterPath) -&gt; QPainterPath\n</code></pre><pre><code>map_to_screenspace(obj: QPoint) -&gt; QPoint\n</code></pre><pre><code>map_to_screenspace(obj: QPointF) -&gt; QPointF\n</code></pre><pre><code>map_to_screenspace(obj: QRect) -&gt; QRect\n</code></pre><pre><code>map_to_screenspace(obj: QRectF) -&gt; QRectF\n</code></pre><pre><code>map_to_screenspace(obj: QPolygon) -&gt; QPolygon\n</code></pre><pre><code>map_to_screenspace(obj: QPolygonF) -&gt; QPolygonF\n</code></pre> <pre><code>map_to_screenspace(obj)\n</code></pre> <p>Convert image world scene coordinates to screenspace scene coordinates.</p> <p>Watch out as the transformation might round float values !</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.on_image_changed","title":"on_image_changed","text":"<pre><code>on_image_changed()\n</code></pre> <p>This method is called right after a new image has been loaded.</p> <p>You can override it and perform action to update your plugin with the new image. The base implementation does nothing.</p> <p>Note that the <code>reload</code> method is called just before this callback.</p>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.paint","title":"paint","text":"<pre><code>paint(\n    painter: QPainter,\n    option: QStyleOptionGraphicsItem,\n    widget: Optional[QWidget] = None,\n) -&gt; None\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.reload","title":"reload","text":"<pre><code>reload()\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.set_visibility_from_scene_event","title":"set_visibility_from_scene_event","text":"<pre><code>set_visibility_from_scene_event(event: QEvent)\n</code></pre>"},{"location":"api/plugins/#lqtImageViewer.plugins.CoordinatesGridPlugin.wheelEvent","title":"wheelEvent","text":"<pre><code>wheelEvent(event: QGraphicsSceneWheelEvent)\n</code></pre>"}]}